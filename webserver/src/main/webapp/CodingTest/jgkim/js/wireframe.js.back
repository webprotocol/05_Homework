/**
 * ▣  실기시험 : (40점 만점)
 * - 작성자 : 김진곤 (5강의실)
 * - 주 제 :
 * - 목 적 :
 * - 기 능 :
 */

(function() {

	var AudioEffector = (function() {

		AudioEffector.prototype.audioFileName = "../2040khz.mp3";
		AudioEffector.prototype.spectrumBandwidth = [18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
			32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
			40, 40, 40, 40, 40, 50, 70, 204];

		AudioEffector.prototype.context = null;
		AudioEffector.prototype.audioElem = null;
		AudioEffector.prototype.audioNode = null;
		AudioEffector.prototype.fanalyser = null;

		AudioEffector.prototype.waveForm = null;
		AudioEffector.prototype.spectrum = null;

		function AudioEffector()
		{
			this.update = this.doUpdate.bind(this);
			this.context = new AudioContext();
			this.loadAudio();
			this.fanalyser = this.context.createAnalyser();
			this.audioNode = this.context.createMediaElementSource(this.audioElem);
			this.audioNode.connect(this.fanalyser);
			this.fanalyser.connect(this.context.destination);
			this.waveForm = new Uint8Array(this.fanalyser.frequencyBinCount);
			this.spectrum = new Float32Array(28);
			this.audioElem.play();
		}

		AudioEffector.prototype.loadAudio = function()
		{
			this.audioElem = new Audio();
			this.audioElem.src = this.audioFileName;
			this.audioElem.crossOrigin = "anonymous";
			this.audioElem.preload = 'auto';
			this.audioElem.controls = true;
			document.body.appendChild(this.audioElem);
		};

		AudioEffector.prototype.doUpdate = function()
		{


			var freqData = new Uint8Array(this.fanalyser.frequencyBinCount);
			this.fanalyser.getByteFrequencyData(freqData);
			var sum = 0;
			var currLeft = this.spectrumBandwidth[0];
			var j = 0;
			for (var i = 0; i < freqData.length; ++i)
			{
				sum += freqData[i];
				if (--currLeft == 0)
				{
					this.spectrum[j] = sum / freqData[j] / 1000;
					sum = 0;
					if (++j < this.spectrumBandwidth.length)
						currLeft = this.spectrumBandwidth[j];
				}
			}

			var waveData = new Uint8Array(this.fanalyser.frequencyBinCount);
			this.fanalyser.getByteTimeDomainData(waveData);
			this.waveForm = waveData;
		};

		return AudioEffector;
	})();


	var VisualEqualizer = (function() {

		VisualEqualizer.prototype.canvas = null;
		VisualEqualizer.prototype.context = null;
		VisualEqualizer.prototype.canvasWidth = 2000;
		VisualEqualizer.prototype.canvasHeight = 1000;
		VisualEqualizer.prototype.centerX = 0;
		VisualEqualizer.prototype.centerY = 0;
		VisualEqualizer.prototype.waveformStyle = null;

		VisualEqualizer.prototype.analyser = null;
		VisualEqualizer.prototype.run = null; //callback function

		function VisualEqualizer()
		{
			this.run = this.runRoutine.bind(this);
			this.initScreen();
			this.analyser = new AudioEffector();
			this.run();
		}

		VisualEqualizer.prototype.initScreen = function()
		{
			this.canvas = document.querySelector("canvas");
			this.context = this.canvas.getContext('2d');
			this.canvas.width = this.canvasWidth;
			this.canvas.height = this.canvasHeight;

			this.waveformStyle = this.context.createLinearGradient(0, 0, 0, this.canvasHeight);
			this.waveformStyle.addColorStop(0.00, "rgb(193, 8, 27)");
			this.waveformStyle.addColorStop(0.50, "rgb(210, 122, 238)");
			this.waveformStyle.addColorStop(1.00, "rgb(22, 20, 225)");
		};


		VisualEqualizer.prototype.runRoutine = function()
		{
			this.analyser.update();
			var spectrum = this.analyser.spectrum;
			var waveform = this.analyser.waveForm;
			var bandWidth = this.canvasWidth / spectrum.length;
			var padding = 5;

			/*
			 background color
			 */
			this.context.fillStyle = "rgb(234, 156, 180)";
			this.context.fillRect(0, 0, this.canvasWidth, this.canvasHeight);

			/*
			 Draw graph
			 */
			this.context.fillStyle = "rgba(124, 183, 239, .7)";
			for (var i = 0; i < spectrum.length; ++i)
			{
				var level = spectrum[i];
				this.context.fillRect(i * bandWidth + padding, this.canvasHeight, bandWidth - padding * 2, -level * this.canvasHeight);
				this.context.fillRect(this.canvasWidth - i * bandWidth - bandWidth + padding, 0, bandWidth - padding * 2, level * this.canvasHeight);
			}

			/*
			 Draw waveform
			 */
			bandWidth = this.canvasWidth / waveform.length;
			this.context.beginPath();
			this.context.strokeStyle = this.waveformStyle;
			this.context.lineWidth = 10;
			this.context.moveTo(0, this.canvasHeight / 2 + waveform[0] - 128);
			for (i = 0; i < waveform.length; ++i) {
				this.context.lineTo(i * bandWidth, this.canvasHeight / 2 + waveform[i] - 128);
			}
			this.context.stroke();
			return requestAnimationFrame(this.run);
		};

		return VisualEqualizer;
	})();

	new VisualEqualizer();
})();
